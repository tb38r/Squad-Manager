TO SHOW DBs show dbs
use {name} -(creates, or accesses if already exists, a db)

show collections - tables inside dbs

db.dropDatabase() - delete database

exit - exit terminal

//INSERT SINGLE ENTRY

db.users.InsertOne({obj}) - db refs the active db, users (creates collection/table users), InsertOne (inserts one record within table)
//insert takes in an obj, JS like syntax

db.users.find() - gets all values within database
//ids are auto generated

dbs ---> collections ----> documents (i.e. objects)


Can nest objects, arrays et al within docs ala JSON literal

//INSER MULTIPLE ENTRIES

db.users.insertMany([{}])
Like insert one except you pass in an array of objects


//QUERYING - READ INFO from DBs

db.users.find().(method())
find has multiple methods 

db.users.find().limit(3)                  //limits result to the specified number
db.users.find().sort({name:1})            //sorts in ascending (1) or descending (-1) order
db.users.find().sort({name:1, age:-1})    //can pass in multiple args to sort
db.users.find().skip(1).limit(4)          //skip 'skips' the given amount

//WHERE name ==
db.users.find({name:"T"})       //returns where name == "T", type specific


//SELECT name where ==
db.users.find({name:"T"}, {name:1, age:1})
second obj arg specifies which fields to return 

To Omit (default ID) pass { _id:0 } as an arg within second obj 

Passing second arg as 0 omits that field, can be stacked with other ommissions, can't be mixed
//db.users.find({name:"T"},{ hobbies:0, age:0})

1 select field, 0 select everything but this field


//COMPLEX QUERIES

db.users.find({name:{$eq:"Yonas"}})  - return where name === "Yonas"
db.users.find({name:{$ne:"Yonas"}}) -  return where name != "Yonas"
db.users.find({age:{$gt:31}}) - return where age > 31
db.users.find({age:{$gte:31}}) - return where age >= 31
db.users.find({age:{$lt:31}}), db.users.find({age:{$lte:31}}) //less than or eq to 

db.users.find({name:{$in:["T", "Yonas"]}}) - if the name attr is in this list of names return INSERT
db.users.find({name:{$nin:["T", "Yonas"]}}) - if the name is not in this list of names 

db.users.find({age:{$exists: true}}) - return objects where age key exists
db.users.find({age:{$exists: false}}) - return objects where age key doesn't exists


///////////////////////////////////////////////////////////////////////////////////


//AND QUERY
db.users.find({age:{$gte:20 , $lte:40}}) - return obj where age is >= 20 && <= 40

db.users.find({age:{$gte:20 , $lte:40}, name: "T"}) where name is T and age considerations
alt to above
db.users.find({$and:[{age:{$lt:31}}, {name:{$in:["T", "Arnold"]}}]})
$and takes in an array of objs


//OR
db.users.find({$or:[{age:{$gt:31}}, {name:{$in:["T", "Arnold"]}}]})

//NOT 
db.users.find({age:{$not:{$lte:32}}})  - returns all objs where the age is !< 32 inc objs where key doesn't exists

//COMPARE KEY VALUES between Objects eg balance >>> debt $expr
db.users.find({$expr:{$gt:["$debt", "$balance"]}}) - returns where debt >>> balance

//NESTED FIELDS
db.users.find({"address.street":"123 Street"})

//FIND ONE
db.users.findOne({age:{$lte:32}})

//COUNT
db.users.countDocuments({age:{$lte:32}})

db.users.countDocuments({age:{$lte:32}})


///////////////////////////////////////////////////////////////////////////////////
UPDATING

//UPDATING & ADDING PROPERTIES
db.users.updateOne({name:"T"},{$set:{age:36}})  - updates where name is T, alternatively 
db.users.updateOne({_id: ObjectId("633315153463fb5bf6ed65a2")},{$set:{name:"Tolu"}})

//UNSET/REMOVE a property
db.users.updateOne({_id: ObjectId("633315153463fb5bf6ed65a2")},{$unset:{age:""}}) - removes age property

//INCREMENT VALUES
db.users.updateOne({_id: ObjectId("633315153463fb5bf6ed65a2")},{$inc:{age:2}}) - increases age value by 2 
use negative values to decrement

//RENAME KEYS
db.users.updateOne({_id: ObjectId("633315153463fb5bf6ed65a2")},{$rename:{name:"firstName"}})

//ADD to ARRAYS
db.users.updateOne({_id: ObjectId("633315153463fb5bf6ed65a2")},{$push:{hobbies:"coding"}})
//REMOVE FROM ARRAYS
db.users.updateOne({_id: ObjectId("633315153463fb5bf6ed65a2")},{$pull:{hobbies:"coding"}})

//UPDATE MANY users
db.users.updateMany({name: {$exists:true}},{$unset:{address:""}}) -finds objects where name value exists and removes the address property

//REPLACE
db.users.replaceOne({_id: ObjectId("633315153463fb5bf6ed65a2")},{name:"T"}) - replaces entire object with the given param 


///////////////////////////////////////////////////////////////////////////////////
DELETE

//DELETE ONE
db.users.deleteOne({_id: ObjectId("633315153463fb5bf6ed65a2")}) 

//DELETE MANY
db.users.deleteMany({balance:{$exists:false}}) - deletes all objects without balance property

//DELETE database
db.dropDatabase()

